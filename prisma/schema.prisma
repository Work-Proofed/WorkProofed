// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  jobsAsClient   Job[]     @relation("JobClient")
  jobsAsProvider Job[]     @relation("JobProvider")
  invoicesAsClient   Invoice[] @relation("InvoiceClient")
  invoicesAsProvider Invoice[] @relation("InvoiceProvider")
  reviewsAsClient   Review[] @relation("ReviewClient")
  reviewsAsProvider Review[] @relation("ReviewProvider")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  status      JobStatus @default(OPEN)
  category    String
  location    String
  budget      Float?
  clientId    String
  providerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?

  client   User      @relation("JobClient", fields: [clientId], references: [id])
  provider User?     @relation("JobProvider", fields: [providerId], references: [id])
  photos   Photo[]
  invoices Invoice[]
  reviews  Review[]
}

model Photo {
  id          String   @id @default(cuid())
  jobId       String
  url         String
  type        PhotoType
  description String?
  latitude    Float?
  longitude   Float?
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())

  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Invoice {
  id            String        @id @default(cuid())
  jobId         String
  clientId      String
  providerId    String
  amount        Float
  status        InvoiceStatus @default(PENDING)
  stripePaymentIntentId String?
  workProofedFee Float
  providerFee   Float
  clientFee     Float
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paidAt        DateTime?

  job      Job  @relation(fields: [jobId], references: [id])
  client   User @relation("InvoiceClient", fields: [clientId], references: [id])
  provider User @relation("InvoiceProvider", fields: [providerId], references: [id])
}

model Review {
  id         String   @id @default(cuid())
  jobId      String
  clientId   String
  providerId String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())

  job      Job  @relation(fields: [jobId], references: [id])
  client   User @relation("ReviewClient", fields: [clientId], references: [id])
  provider User @relation("ReviewProvider", fields: [providerId], references: [id])
}

enum UserRole {
  CLIENT
  PROVIDER
  ADMIN
}

enum JobStatus {
  OPEN
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  PAID
  CANCELLED
}

enum PhotoType {
  BEFORE
  AFTER
  PROGRESS
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}